# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

pool:
  vmImage: ubuntu-latest

stages: 

- stage: Provision
  displayName: Provision EC2
  jobs:
    - job: Terraform
      displayName: Provision EC2 using Terraform
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self
        - task: TerraformCLI@2
          inputs:
            command: 'init'
        - task: TerraformCLI@2
          inputs:
            command: 'validate'
            additionalArguments: '-var "aws_access_key=$(AWS_ACCESS_KEY_ID)" ,-var "aws_secret_key=$(AWS_SECRET_ACCESS_KEY)" '
            allowTelemetryCollection: true
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        - task: TerraformCLI@2
          inputs:
            command: 'plan'
            additionalArguments: '-var "aws_access_key=$(AWS_ACCESS_KEY_ID)" -var "aws_secret_key=$(AWS_SECRET_ACCESS_KEY)"'
            allowTelemetryCollection: true
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        - task: TerraformCLI@2
          inputs:
            command: 'apply'
            additionalArguments: '-var "aws_access_key=$(AWS_ACCESS_KEY_ID)" -var "aws_secret_key=$(AWS_SECRET_ACCESS_KEY)"'
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        - script: |
            ssh -o StrictHostKeyChecking=no -i $(SSH_PRIVATE_KEY) $(SSH_USER)@$(EC2_PUBLIC_IP) << 'EOF'
            sudo yum update -y
            sudo yum install -y python3 git
            git clone https://github.com/your-user/your-dash-app-repo.git /home/ec2-user/dash_app
            git clone https://github.com/your-user/your-flask-api-repo.git /home/ec2-user/flask_api
            EOF
          displayName: "Clone Dash App and Flask API from GitHub"
        - script: |
            ssh -o StrictHostKeyChecking=no -i $(SSH_PRIVATE_KEY) $(SSH_USER)@$(EC2_PUBLIC_IP) << 'EOF'
            pip3 install -r /home/ec2-user/dash_app/requirements.txt
            pip3 install -r /home/ec2-user/flask_api/requirements.txt
            nohup python3 /home/ec2-user/dash_app/app.py > /home/ec2-user/dash_app.log 2>&1 &
            nohup python3 /home/ec2-user/flask_api/api.py > /home/ec2-user/flask_api.log 2>&1 &
            EOF
          displayName: "Install Dependencies and Start Applications"
